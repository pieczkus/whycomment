include "secure.conf.conf"


play {

  server {
    # The server provider class name
    provider = "play.core.server.AkkaHttpServerProvider"

    akka {
      # How long to wait when binding to the listening socket
      bindTimeout = 5 seconds

      # The idle timeout for an open connection after which it will be closed
      # Set to null to disable the timeout
      https.idleTimeout = 75 seconds
      http.idleTimeout = 75 seconds

      # How long a request takes until it times out
      requestTimeout = null

      # Enables/disables automatic handling of HEAD requests.
      # If this setting is enabled the server dispatches HEAD requests as GET
      # requests to the application and automatically strips off all message
      # bodies from outgoing responses.
      # Note that, even when this setting is off the server will never send
      # out message bodies on responses to HEAD requests.
      transparent-head-requests = off

      # If this setting is empty the server only accepts requests that carry a
      # non-empty `Host` header. Otherwise it responds with `400 Bad Request`.
      # Set to a non-empty value to be used in lieu of a missing or empty `Host`
      # header to make the server accept such requests.
      # Note that the server will never accept HTTP/1.1 request without a `Host`
      # header, i.e. this setting only affects HTTP/1.1 requests with an empty
      # `Host` header as well as HTTP/1.0 requests.
      # Examples: `www.spray.io` or `example.com:8080`
      default-host-header = ""

      # Enables/disables the addition of a `Remote-Address` header
      # holding the clients (remote) IP address.
      remote-address-header = off

      # The default value of the `Server` header to produce if no
      # explicit `Server`-header was included in a response.
      # If this value is the empty string and no header was included in
      # the request, no `Server` header will be rendered at all.
      server-header = ""
    }
  }

}

play.akka.actor-system = "ArrSystem"

maxShards = 100

elasticsearch {
  host = "127.0.0.1"
  host = ${?ELASTIC_HOST}
  port = 9300
  port = ${?ELASTIC_PORT}
  username = "elastic"
  username = ${?ELASTIC_USER}
  password = "changeme"
  password = ${?ELASTIC_PASS}
}

cassandra {
  host = "127.0.0.1"
  host = ${?CASSANDRA_HOST}
  port = 9042
  port = ${?CASSANDRA_PORT}
  number-of-retries = 500
}

cassandra-journal {
  contact-points = [${cassandra.host}]
  port = ${cassandra.port}
  authentication.username = "cassandra"
  authentication.username = ${?CASS_USER}
  authentication.password = "cassandra"
  authentication.password = ${?CASS_PASS}
  event-adapters {
    proto = "common.ProtobufDataModelAdapter"
  }

  event-adapter-bindings {
    "common.EntityEvent" = proto
    "com.trueaccord.scalapb.GeneratedMessage" = proto
    "com.google.protobuf.Message" = proto
  }

  tags = {
    device = 1
    devicecreated = 2
    deviceupdated = 2
    devicepublished = 2
    batch = 1
    batchcreated = 2
    batchpublished = 2
    deviceassigned = 2
    warehouse = 1
    warehousecreated = 2
    warehouseupdated = 2
    resumable-projection = 1
    resumableprojectioncreated = 2
    offsetupdated = 2
  }
}

cassandra-snapshot-store {
  contact-points = [${cassandra.host}]
  port = ${cassandra.port}
  authentication.username = "cassandra"
  authentication.username = ${?CASS_USER}
  authentication.password = "cassandra"
  authentication.password = ${?CASS_PASS}
}

akka {
  loglevel = DEBUG
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logger-startup-timeout = 10s

  remote {
    netty.tcp {
      hostname = ${clustering.ip}
      port = ${clustering.port}

      bind-hostname = ${clustering.ip}
      bind-port = ${clustering.port}
    }
  }

  persistence {
    journal.plugin = "cassandra-journal"
    snapshot-store.plugin = "cassandra-snapshot-store"
  }

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
    enable-additional-serialization-bindings = on
    allow-java-serialization = off
    serializers {
      proto = "akka.remote.serialization.ProtobufSerializer"
    }
    serialization-bindings {
      "java.io.Serializable" = none
      "com.trueaccord.scalapb.GeneratedMessage" = proto
      "com.google.protobuf.Message" = proto
    }
  }

  cluster {
    seed-nodes = [
      "akka.tcp://"${clustering.name}"@"${clustering.seed-ip}":"${clustering.seed-port}
    ]
  }
}

clustering {
  ip = "127.0.0.1"
  ip = ${?CLUSTER_IP}
  port = 2552
  port = ${?CLUSTER_PORT}
  seed-ip = "127.0.0.1"
  seed-ip = ${?SEED_HOST}
  seed-port = 2552
  seed-port = ${?SEED_PORT}
  name = "ArrSystem"
  name = ${?APP_SYSTEM}
}

